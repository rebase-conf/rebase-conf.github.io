talks:
- title: 'Hedy: Creating a gradual programming language'
  time: '10:00'
  abstract: "Hedy is a gradual programming language to make learning programming easier.
    The core idea of Hedy is that it uses different language levels. In level 1, there
    is hardly any syntax at all, for example printing is done with: `print hello REBASE
    conf`\nIn every level, new syntax and concepts are added, until kids are doing
    a subset of Python in level 22 with conditions, loops, variables and lists. The
    leveled approach means that learners do not have to learn all syntax rules at
    once. Hedy is aimed at children that want to get started with textual programming
    languages, but for whom starting with Python might still be too complex. Hedy
    is open source, runs in the browser, is free to use, and available in fifteen
    different languages (Including English, Spanish, Chinese and Hindi). Hedy was
    launched in early 2020 and since then almost 1.5 million Hedy programs have been
    created by children worldwide. Try Hedy at [www.hedycode.com](www.hedycode.com).
    \n\nIn this talk, Felienne will dive into the pedagogy behind Hedy, but also expand
    on the technical aspects of Hedy. For example, a set of increasingly complex grammars,
    rather than one grammar, poses new challenges for language design."
  persons:
  - name: Felienne Hermans
    id: felienne_hermans
    type: speaker
    affiliation: Leiden University
    twitter: Felienne
    website: https://www.felienne.com/
    bio: "Felienne is associate professor at the Leiden Institute of Advanced \nComputer
      Science at Leiden University, where she heads the Programming \nEducation Research
      Lab (PERL). Felienne’s work focuses on the question \nhow to best teach programming
      to kids and students, investigating \nmisconceptions, didactic strategies and
      programming environments. \nFelienne is a co-editor of the ACM journal Transactions
      on Computing \nEducation, and a host at the IEEE podcast SE Radio, one of the
      most \npopular software engineering podcasts on the web. She writes a monthly
      \ncolumn for Dutch IT magazine AG Connect and she ran the Joy of Coding \nconference
      for 6 years. When she is not coding, blogging or teaching, \nshe is probably
      knitting, running or playing a (board)game.\n\nFelienne blogs at [felienne.com](felienne.com)"
  - name: Federico Tomassetti
    id: federico_tomassetti
    type: panelist
    affiliation: Strumenta
    twitter: ftomasse
    website: https://tomassetti.me/
- title: The F# view on the Static / Dynamic divide
  time: '11:50'
  abstract: "Programming languages come with increasingly powerful type-level programming
    features and meta-programming facilities\n – both of which shift part of the computation
    from dynamic (our traditional notion of “run-time”) to static (what often think
    of as \n“compile-time”). This boundary is being blurred as compilation increasingly
    happens at run-time and computations are staged.   This \nmeans we have to start
    thinking about debuggers and profilers for our type systems. But we must also
    ask whether that additional expressive \npower is actually a net positive. Where
    is the point of diminishing returns?"
  persons:
  - name: Don Syme
    id: don_syme
    type: speaker
    affiliation: Microsoft
    twitter: dsymetweets
    website: https://fsharp.org/
    bio: "Don Syme is a Senior Research at Microsoft Research, UK, and is \nresponsible
      for the design of the F# programming language. He has \ncontributed extensively
      to the design of the .NET platform through the \ndesign and implementation of
      .NET and C# generics. His research focuses \non the technical aspects of programming
      language design and \nimplementation needed to make functional languages that
      are simpler to \nuse, interoperate well with other languages and which incorporate
      \naspects of object-oriented, asynchronous and parallel programming. He \nhas
      a PhD from the University of Cambridge and a BSc. from the \nAustralian National
      University."
  - name: Nicholas Matsakis
    id: nicholas_matsakis
    type: panelist
    affiliation: Amazon
    twitter: nikomatsakis
    website: https://smallcultfollowing.com/babysteps/
- title: A Retrospective on the Design of the Swift Programming Language
  time: '14:50'
  abstract: |-
    How swiftly did Swift become Swift? What were the main roadblocks and challenges? Where is the language going next? These
     and many other Swift-related questions will be discussed by the speakers. Audience interaction is welcome.
  persons:
  - name: Dave Abrahams
    id: dave_abrahams
    type: speaker
    affiliation: Adobe
    twitter: DaveAbrahams
    website: https://daveabrahams.com/
    bio: "Dave Abrahams is a specialist in programming language and library \ndesign
      and a recognized leader in the Swift and C++ programming language\n communities.
      He is a principal designer of the Swift programming \nlanguage, a founding member
      of Boost.org, a former longstanding member \nof the ISO C++ standardization
      committee, and co-author of a book in \nBjarne Stroustrup’s “C++ In Depth” series.
      Dave is a natural \ncollaborator known for his insights into hard problems and
      is an \nin-demand speaker at conferences all over the world. His mission is
      to \nfix software development. \nMost recently (since 2013), Dave was at Apple
      developing the Swift \nlanguage and standard library, and then the SwiftUI declarative
      UI \nframework. He remained an active member of the Swift core team, guiding
      \nthe language’s evolution, throughout. \nDave’s range of experience in industry
      includes application software \ndevelopment, framework design, embedded systems,
      and natural language \nprocessing. He is the author of eight Boost libraries
      and has made \ncontributions to numerous others. \nDave’s first major accomplishment
      in the C++ community was to create \nand promote an understanding of exception-safety
      that is still the \nstandard today. Known as the “Abrahams Guarantees.” this
      framework is \nnow part of the standard library. In 2001 he founded Boost Consulting
      \n(now Boostpro Computing) to realize the promise of advanced, open-source\n
      C++ libraries."
  - name: Roman Elizarov
    id: roman_elizarov
    type: panelist
    affiliation: JetBrains
    twitter: relizarov
    website: https://elizarov.medium.com/
  - name: Denys Shabalin
    id: denys_shabalin
    type: panelist
    affiliation: Google
    twitter: den_sh
    website: https://github.com/densh
- title: A Brief History of API Design Revisited
  time: '16:40'
  abstract: "How do we design interfaces? What is a good \ndesign? How can we tell
    that something is wrong? Josh Bloch has many \nyears of hands on experience working
    on the Java Collection framework as\n well as the math library. He will engage
    us into a discussion of keys \nprinciples. Josh has also been active on the legal
    front, battling for \nthe right to reimplement interfaces. He will update us on
    the latest \ndevelopments."
  persons:
  - name: Josh Bloch
    id: josh_bloch
    type: speaker
    affiliation: CMU
    twitter: joshbloch
    website: https://en.wikipedia.org/wiki/Joshua_Bloch
    bio: "Joshua Bloch is a professor at Carnegie Mellon \nUniversity. He was formerly
      the chief Java architect at Google, a \ndistinguished engineer at Sun Microsystems,
      and a senior systems \ndesigner at Transarc. He led the design and implementation
      of numerous \nJava platform features, including the JDK 5.0 language enhancements
      and \nthe Java Collections Framework. He holds a Ph.D. in computer science \nfrom
      Carnegie Mellon University and a B.S. in computer science from \nColumbia University."
  - name: Doug Lea
    id: doug_lea
    type: panelist
    affiliation: State University of New York at Oswego
    twitter: douglea
    website: https://en.wikipedia.org/wiki/Doug_Lea
- title: Fragmentation of Machine Architecture
  time: '18:30'
  abstract: Not too many years ago, the machine architecture supported by consumer
    devices looked to be converging on a largely uniform model, the Intel x86 instruction
    set & OpenCL/GL GPU computation. But now, hardware architecture is increasingly
    fragmented and complex, while at the same time, the marketplace is demanding higher
    performance and interactivity across a more extensive range of devices. This talk
    looks at how we got here, the challenges of supporting these architectures from
    software applications, and an opening to discuss how software languages will play
    a role in making sense of the chaos.
  persons:
  - name: Sean Parent
    id: sean_parent
    type: speaker
    affiliation: Adobe
    twitter: SeanParent
    website: https://stlab.cc/
    bio: "Sean Parent is a senior principal scientist and software architect for \nAdobe’s
      mobile digital imaging group and Photoshop. Sean has been at \nAdobe since 1993
      when he joined as a senior engineer working on \nPhotoshop and later managed
      Adobe’s Software Technology Lab. In 2009 \nSean spent a year at Google working
      on Chrome OS before returning to \nAdobe. From 1988 through 1993 Sean worked
      at Apple, where he was part of\n the system software team that developed the
      technologies allowing \nApple’s successful transition to PowerPC."
  - name: Mario Wolczko
    id: mario_wolczko
    type: panelist
    affiliation: Oracle Labs
    twitter: mwolczko
    website: http://www.wolczko.com/
